package services

import (
	"context"
	"errors"
	"fmt"
	"time"

	"{{ .ProjectName }}/{{ $.AppName }}/models"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
	"go.mongodb.org/mongo-driver/bson"
	"github.com/jinzhu/copier"
)

// UserService wraps MongoDB logic for users
type {{.Name}}Service struct {
	Collection *mongo.Collection
	Client     *mongo.Client
	Database   *mongo.Database
}


// Constructor For Client
func New{{.Name}}Service(client *mongo.Client) (*{{.Name}}Service, error) {
	database := client.Database("{{ $.AppName |  replaceString }}")
	collection := database.Collection("{{.Name}}s")
	return &{{.Name}}Service{
		Collection: collection,
		Client:     client,
		Database:   database,
	}, nil
}

// Utility function for transactions
func (s *{{.Name}}Service) withTransaction(ctx context.Context, fn func(sc mongo.SessionContext) error) error {
	session, err := s.Client.StartSession()
	if err != nil {
		return fmt.Errorf("start session failed: %w", err)
	}
	defer session.EndSession(ctx)

	return mongo.WithSession(ctx, session, func(sc mongo.SessionContext) error {
		if err := session.StartTransaction(); err != nil {
			return err
		}
		if err := fn(sc); err != nil {
			session.AbortTransaction(sc)
			return err
		}
		return session.CommitTransaction(sc)
	})
}


// Create inserts a new {{.LowerName}}
func (s *{{.Name}}Service) Create(ctx context.Context, posted_{{.LowerName}} *models.{{.Name}}Post) (*models.{{.Name}}Get, error) {
	var created{{.Name}} models.{{.Name}}Get
	
	err := s.withTransaction(ctx, func(sc mongo.SessionContext) error {
			{{- range .Fields}} {{- if .Post}}
				{{- if eq .Name "Password" }}
			hashedPassword := models.HashFunc(posted_user.Password)
					{{- end }}
				{{- end }}
			{{- end }}

			{{.LowerName}} := models.{{.Name}}{
					ID: primitive.NewObjectID(),
			{{- range .Fields}} {{- if .Post}}
				{{- if eq .Name "Password" }}
					{{.Name}}:  hashedPassword,
				{{- else if eq .Name "ID" }}
					{{.Name}}:  primitive.NewObjectID(),
				{{- else }}
					{{.Name}}:  posted_{{.ModelName | toLowerCaseName }}.{{.Name}},
				{{- end	}}
			{{- end}}
			{{- end}}
					CreatedAt:   time.Now(),
			}


			_, err := s.Collection.InsertOne(ctx, {{.LowerName}})
			if err != nil {
				return fmt.Errorf("insert failed: %w", err)
			}

			copier.Copy(created{{.Name}},{{.LowerName}})
			
			return nil
		})

		return &created{{.Name}}, err
}

// GetOne fetches a {{.LowerName}} by ID
func (s *{{.Name}}Service) GetOne(ctx context.Context, id string) (*models.{{.Name}}Get, error) {
	
	objID, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, fmt.Errorf("invalid ID: %w", err)
	}

	var {{.LowerName}} models.{{.Name}}Get
	err = s.Collection.FindOne(ctx, bson.M{"_id": objID}).Decode(&{{.LowerName}})
	if err != nil {
		return nil, err
	}

	return &{{.LowerName}}, nil
}

// Get returns {{.LowerName}}s with pagination and search
func (s *{{.Name}}Service) Get(ctx context.Context, pagination models.Pagination, searchFields []string, searchTerm []string) ([]models.{{.Name}}Get, uint, error) {

	// Build search query if any
	filter := bson.M{}
	if  len(searchTerm) > 0 && len(searchFields) > 0 && len(searchFields) >= len(searchTerm) {
		var orConditions []bson.M
		for index, term := range searchTerm {
			orConditions = append(orConditions, bson.M{
				searchFields[index]: bson.M{"$regex": term, "$options": "i"},
			})
		}
		filter["$or"] = orConditions
	}

	//pagination logic
	skip := int64(pagination.Page * pagination.Size)
	opts := options.Find().
		SetSkip(skip).
		SetLimit(int64(pagination.Size))

	// Count all documents (no filter)
	totalCount, _ := s.Collection.CountDocuments(ctx, filter)

	cursor, err := s.Collection.Find(ctx, filter, opts)
	if err != nil {
		return nil,uint(totalCount), err
	}
	defer cursor.Close(ctx)

	var {{.LowerName}}s []models.{{.Name}}Get
	for cursor.Next(ctx) {
		var u models.{{.Name}}Get
		if err := cursor.Decode(&u); err != nil {
			return nil, uint(totalCount), err
		}
		{{.LowerName}}s = append({{.LowerName}}s, u)
	}

	return {{.LowerName}}s,uint(totalCount), nil
}

// Update modifies a {{.Name}}s by ID
func (s *{{.Name}}Service) Update(ctx context.Context, patch_{{.LowerName}} *models.{{.Name}}Patch, id string) (*models.{{.Name}}Get, error) {
	// update User
	var updated{{.Name}} *models.{{.Name}}Get

	{{.LowerName}}_id, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return &models.{{.Name}}Get{},fmt.Errorf("invalid ID: %w", err)
	}

	err = s.withTransaction(ctx, func(sc mongo.SessionContext) error {
			updateFields := bson.M{}
			{{- range .Fields}} {{- if .Patch}}
			{{- if eq .Name "Password" }}
			if patch_{{$.LowerName}}.{{.Name}} != nil {
				// setting password string to hash
				hashedPassword := models.HashFunc(*patch_{{$.LowerName}}.Password)
				updateFields["{{.Name | camelToSnake }}"] = hashedPassword
			}
			{{- else if eq .Name "ID" }}
				
			{{- else }}
			if patch_{{$.LowerName}}.{{.Name}} != nil {
				updateFields["{{.Name | camelToSnake }}"] = *patch_{{$.LowerName}}.{{.Name}}
			}
			{{- end	}}
			{{- end}}
			{{- end}}
			updateFields["updated_at"]=time.Now()
				
			
			// filter to use to update value by 
			filter{{.Name}} := bson.M{"_id": {{.LowerName}}_id}
			update{{.Name}} := bson.M{"$set": updateFields}
			// Update the document by ID
			_, err := s.Collection.UpdateOne(ctx, filter{{.Name}}, update{{.Name}})
			if err != nil {
				return fmt.Errorf("insert failed: %w", err)
			}
	
			return nil
		})
	
	copier.Copy(&updated{{.Name}}, patch_{{.LowerName}})
	return updated{{.Name}}, err
}

// Delete removes a {{.LowerName}} by ID
func (s *{{.Name}}Service) Delete(ctx context.Context, id string) error {

	err := s.withTransaction(ctx, func(sc mongo.SessionContext) error {
		objID, err := primitive.ObjectIDFromHex(id)
		if err != nil {
			return fmt.Errorf("invalid ID: %w", err)
		}

		result, err := s.Collection.DeleteOne(ctx, bson.M{"_id": objID})
		if err != nil {
			return err
		}

		if result.DeletedCount == 0 {
			return errors.New("no document deleted")
		}

		return nil
	})

	return err
}


{{- range .Relations }}
// ##########################################################
// ##########  Relationship  Services to {{.FieldName}}
// ##########################################################

func (s *{{$.Name}}Service) Add{{$.Name}}To{{.FieldName}}(ctx context.Context, {{$.Name | toLowerCaseName}}ID, {{.LowerFieldName}}ID string) error {
	{{$.Name | toLowerCaseName}}_id, err := primitive.ObjectIDFromHex({{$.Name | toLowerCaseName}}ID)
	{{.LowerFieldName}}_id, err := primitive.ObjectIDFromHex({{.LowerFieldName}}ID)
	if err != nil {
		return err
	}

	_, err = s.Collection.UpdateOne(ctx, bson.M{"_id": {{$.Name | toLowerCaseName}}_id}, bson.M{
		"$addToSet": bson.M{"{{.LowerFieldName}}_ids": {{.LowerFieldName}}_id}, // Prevents duplicates
	})
	return err
}

func (s *{{ $.Name}}Service) Remove{{ $.Name}}From{{.FieldName}}(ctx context.Context, {{$.Name | toLowerCaseName}}ID, {{.LowerFieldName}}ID string) error {
	{{$.Name | toLowerCaseName}}_id, err := primitive.ObjectIDFromHex({{$.Name | toLowerCaseName}}ID)
	{{.LowerFieldName}}_id, err := primitive.ObjectIDFromHex({{.LowerFieldName}}ID)
	if err != nil {
		return err
	}

	_, err = s.Collection.UpdateOne(ctx, bson.M{"_id": {{ $.Name | toLowerCaseName}}_id}, bson.M{
		"$pull": bson.M{"{{.LowerFieldName}}_ids": {{.LowerFieldName}}_id},
	})
	return err
}


func (s *{{$.Name}}Service) Get{{$.Name}}{{.FieldName}}s(ctx context.Context, {{$.Name | toLowerCaseName}}ID string, pagination models.Pagination) ([]models.{{.FieldName}}, uint, error) {
	{{$.Name | toLowerCaseName}}_id, _ := primitive.ObjectIDFromHex({{$.Name | toLowerCaseName}}ID)
	var {{$.Name | toLowerCaseName}} models.{{$.Name}}
	if err := s.Collection.FindOne(ctx, bson.M{"_id": {{$.Name | toLowerCaseName}}_id}).Decode(&{{$.Name | toLowerCaseName}}); err != nil {
		return nil, 0, err
	}

	{{.LowerFieldName}}Collection := s.Database.Collection("{{.FieldName}}s")
	filter := bson.M{"_id": bson.M{"$in": {{$.Name | toLowerCaseName}}.{{.FieldName}}IDs }}
	opts := options.Find().
		SetSkip(int64(pagination.Page * pagination.Size)).
		SetLimit(int64(pagination.Size))

	total, _ := {{.LowerFieldName}}Collection.CountDocuments(ctx, filter)

	cursor, err := {{.LowerFieldName}}Collection.Find(ctx, filter, opts)
	if err != nil {
		return nil, 0, err
	}
	defer cursor.Close(ctx)

	var {{.LowerFieldName}}s []models.{{.FieldName}}
	for cursor.Next(ctx) {
		var g models.{{.FieldName}}
		cursor.Decode(&g)
		{{.LowerFieldName}}s = append({{.LowerFieldName}}s, g)
	}

	return {{.LowerFieldName}}s, uint(total), nil
}
// #########################
// No Pagination Services###
// #########################

func (s *{{$.Name}}Service) GetAll{{.FieldName}}sFor{{$.Name}}(ctx context.Context, {{$.Name | toLowerCaseName}}ID string) ([]models.{{.FieldName}}, error) {
	{{$.Name | toLowerCaseName}}_id, err := primitive.ObjectIDFromHex({{$.Name | toLowerCaseName}}ID)
	if err != nil {
		return nil, fmt.Errorf("invalid {{$.Name | toLowerCaseName}} ID: %w", err)
	}

	var {{$.Name | toLowerCaseName}} models.{{$.Name}}
	if err := s.Collection.FindOne(ctx, bson.M{"_id": {{$.Name | toLowerCaseName}}_id}).Decode(&{{$.Name | toLowerCaseName}}); err != nil {
		return nil, fmt.Errorf("failed to fetch {{$.Name | toLowerCaseName}}: %w", err)
	}

	{{.LowerFieldName}}Collection := s.Database.Collection("{{.FieldName}}s")
	filter := bson.M{"_id": bson.M{"$in": {{$.Name | toLowerCaseName}}.{{.FieldName}}IDs}}

	cursor, err := {{.LowerFieldName}}Collection.Find(ctx, filter)
	if err != nil {
		return nil, fmt.Errorf("failed to fetch {{.LowerFieldName}}s: %w", err)
	}
	defer cursor.Close(ctx)

	var {{.LowerFieldName}}s []models.{{.FieldName}}
	for cursor.Next(ctx) {
		var g models.{{.FieldName}}
		if err := cursor.Decode(&g); err != nil {
			return nil, fmt.Errorf("failed to decode {{.LowerFieldName}}: %w", err)
		}
		{{.LowerFieldName}}s = append({{.LowerFieldName}}s, g)
	}

	return {{.LowerFieldName}}s, nil
}


func (s *{{$.Name}}Service) GetAll{{.FieldName}}s{{$.Name | toLowerCaseName}}DoesNotHave(ctx context.Context, {{$.Name | toLowerCaseName}}ID string) ([]models.{{.FieldName}}, error) {
	{{$.Name | toLowerCaseName}}_id, err := primitive.ObjectIDFromHex({{$.Name | toLowerCaseName}}ID)
	if err != nil {
		return nil, fmt.Errorf("invalid {{$.Name | toLowerCaseName }} ID: %w", err)
	}

	var {{$.Name | toLowerCaseName}} models.{{$.Name}}
	if err := s.Collection.FindOne(ctx, bson.M{"_id": {{$.Name | toLowerCaseName}}_id }).Decode(&{{$.Name | toLowerCaseName}}); err != nil {
		return nil, fmt.Errorf("failed to fetch {{$.Name | toLowerCaseName }}: %w", err)
	}

	{{.LowerFieldName}}Collection := s.Database.Collection("{{.FieldName}}s")

	filter := bson.M{}
	if len({{$.Name | toLowerCaseName}}.{{.FieldName}}IDs) > 0 {
		filter["_id"] = bson.M{"$nin": {{$.Name | toLowerCaseName }}.{{.FieldName}}IDs}
	}

	cursor, err := {{.LowerFieldName}}Collection.Find(ctx, filter)
	if err != nil {
		return nil, fmt.Errorf("failed to fetch {{.LowerFieldName}}s: %w", err)
	}
	defer cursor.Close(ctx)

	var {{.LowerFieldName}}s []models.{{.FieldName}}
	for cursor.Next(ctx) {
		var g models.{{.FieldName}}
		if err := cursor.Decode(&g); err != nil {
			return nil, fmt.Errorf("failed to decode {{.LowerFieldName}}: %w", err)
		}
		{{.LowerFieldName}}s = append({{.LowerFieldName}}s, g)
	}

	return {{.LowerFieldName}}s, nil
}



{{- end}}


// ##########################################################
// ##########  Custom Services Add Here   ###################
// ##########################################################