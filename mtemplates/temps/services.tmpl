package services

import (
	"context"
	"errors"
	"fmt"
	"time"

	"{{ .ProjectName }}/{{ $.AppName }}/models"
	"{{ .ProjectName }}/database"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

// UserService wraps MongoDB logic for users
type {{.Name}}Service struct {
	Collection *mongo.Collection
}


// Constructor
func New{{.Name}}Service() (*{{.Name}}Service, error) {
	client, err := database.ReturnMongoClient("{{ $.AppName }}")
	if err != nil {
		return &{{.Name}}Service{}, err
	}
	collection := client.Database("{{ $.AppName }}").Collection("{{.Name}}s")
	return &{{.Name}}Service{Collection: collection}, nil
}

// Create inserts a new {{.LowerName}}
func (s *{{.Name}}Service) Create(ctx context.Context, {{.LowerName}} *models.{{.Name}}) (*models.{{.Name}}, error) {
	//  initalizing colleciton
	New{{.Name}}Service()
	{{.LowerName}}.ID = primitive.NewObjectID()
	{{.LowerName}}.CreatedAt = time.Now()

	_, err := s.Collection.InsertOne(ctx, {{.LowerName}})
	return {{.LowerName}}, err
}